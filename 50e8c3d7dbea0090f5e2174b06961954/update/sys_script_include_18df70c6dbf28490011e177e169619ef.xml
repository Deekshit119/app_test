<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_hdvi2_expense.HVSExpenseExtractUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>HVSExpenseExtractUtils</name>
        <script><![CDATA[var HVSExpenseExtractUtils = Class.create();
HVSExpenseExtractUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {


    generateExtraction: function(date, type) {
        var checkIfExtractRunning = this.isExtractionInProgress(type);
        if (checkIfExtractRunning == false) {
            var id = '';

            if (type == 0) {
                var gr_extract = new GlideRecord("x_hdvi2_expense_extract");
                gr_extract.initialize();
                gr_extract.status = 1;
                gr_extract.attribution_date = date;
                id = gr_extract.insert();
            } else if (type == 1) {
                var gr_extract_SalAdv = new GlideRecord("x_hdvi2_btask_salary_advance_extract");
                gr_extract_SalAdv.initialize();
                gr_extract_SalAdv.status = 1;
                gr_extract_SalAdv.extract_type = type.toString(10);
                gr_extract_SalAdv.attribution_date = date;
                id = gr_extract_SalAdv.insert();
            }

            return id;
        } else {
            return "";
        }
    },

    isExtractionInProgress: function(type) {
        var answer = false;

        if (type == 0) {
            var gr_extract = new GlideRecord("x_hdvi2_expense_extract");
            gr_extract.addQuery("status", 1);
            gr_extract.addQuery("extract_type", "=", "NULL");
            gr_extract.query();
            if (gr_extract.hasNext()) {
                answer = true;
            }
        } else if (type == 1) {
            var gr_extract_SalAdv = new GlideRecord("x_hdvi2_btask_salary_advance_extract");
            gr_extract_SalAdv.addQuery("status", 1);
            gr_extract_SalAdv.addQuery("extract_type", type);
            gr_extract_SalAdv.query();
            if (gr_extract_SalAdv.hasNext()) {
                answer = true;
            }
        }
        return answer;
    },

    generateCSV: function(extract_id) {
		
		//Generate the report the the accounting team
		var iSheetFundNb = 0;
        var querySheetFund = 'approval=approved^status=3^active=true^reimbursement_via_funds=true';
        var gr_sheetFund = new GlideAggregate("x_hdvi2_expense_sheet");
        gr_sheetFund.addEncodedQuery(querySheetFund);
        gr_sheetFund.addAggregate('COUNT');
        gr_sheetFund.query(); 
        if (gr_sheetFund.next()) {
            iSheetFundNb = gr_sheetFund.getAggregate('COUNT');
		}
        if (iSheetFundNb > 0) this._generateReportForAccounting(extract_id);
		

        /**********************************************************************************************/
        /* BBH 07.09.2020 - When the expense is linked to a fund, do not take it in consideration within this extraction
         * Before modif :
         * var querySheet = 'approval=approved^status=3^active=true';
		 *
		*BBH 11.02.2021 - Virginie wants to see the fund extraction as well
		Before modif: 
		*var querySheet = 'approval=approved^status=3^active=true^reimbursement_via_funds=false';
         */
        
		var querySheet = 'approval=approved^status=3^active=true';
        var queryLine = 'active=true^status=3';

        var number_of_expense_sheets = 0;
        var number_of_expense_lines = 0;
        var total_amount_extract = 0;
        var employees_refunded = [];


        var gr_extract = new GlideRecord("x_hdvi2_expense_extract");
        if (gr_extract.get(extract_id)) {

            //--------------------------------


            var Headers = ["Type,Fonction,Societe,Groupe Decompte,Matricule,Nom,Prenom,Contrat,Rubrique,Jours,Heures,Facteur,Montant,CC,Compte,UniteCharge,Date Jour,Attribution,Source,Date Source,Pourcentage,C/C,ID User,Pieces,Societe C/C,GrpDec C/C,Position,Texte,Employe des,Employe au,%-Impot,%-Impot,Numero Justificatif,Groupe Service,Rubrique 1,Rubrique 2,Rubrique 3,Numero,Etablissement,Jour precis,Numero Famille,Mois,Annee,ID unique,Date,fehlerhafte Datensatze vom Import"];
            var fileName_standard = 'extract_standard.csv';
            var fileName_training = 'extract_training.csv';

            var csvData = ''; //The variable csvData will contain a string which is used to build the CSV file contents
            for (var i = 0; i < Headers.length; i++) { //Build the Headers
                csvData += '"' + Headers[i] + '"' + ',';
            }
            csvData += "\r\n";
            var csvData_standard = csvData;
            var csvData_training = csvData;

            // PSO - remove comment for testing;
            //var sIdExpSheetForTest = '<id>'; /* remplacer <id> par le sys_id d'une note de frais en attente de paiement */
            //querySheet = querySheet + '^sys_id=' + sIdExpSheetForTest;

            var gr_sheet = new GlideRecord("x_hdvi2_expense_sheet");
            gr_sheet.addEncodedQuery(querySheet);
            gr_sheet.query();

            while (gr_sheet.next()) {

                //Update stats variables
                number_of_expense_sheets++;
                total_amount_extract += gr_sheet.total_refunded_amount;

                var new_employee = true;
                var employee_to_search = "" + gr_sheet.requested_for.sys_id;
                for (var x = 0; x < employees_refunded.length; x++) {
                    if (employees_refunded[x] == employee_to_search) {
                        new_employee = false;
                        break;

                    }
                }

                if (new_employee == true) {
                    employees_refunded.push(employee_to_search);
                }

                //-------------------------------------
                if (gr_sheet.sys_id) {
                    //We will loop on the lines
                    var query = queryLine + "^expense=" + gr_sheet.sys_id;
                    var gr_line = new GlideRecord("x_hdvi2_expense_line");
                    gr_line.addEncodedQuery(query);
                    gr_line.query();

                    while (gr_line.next()) {
                        //stats
                        number_of_expense_lines++;
                        //Add new line to the CSV file
                        var employee_number = "";
                        if (gr_sheet.requested_for.employee_number) {
                            // PSO 10.04.20 - change regex expression and get 8 chars from right
                            // Old regex : /[a-zA-Z*_0*]/g - New regex : /[a-zA-Z_-]/g
                            // employee number must be 8 chars max. if less then pad with leading "0" 
                            employee_number = "00000000" + gr_sheet.requested_for.employee_number.replace(/[a-zA-Z_-]/g, "");
                            employee_number = employee_number.slice(-8);
                            // PSO 10.04.20 end of modification
                        }
                        var firstname = gr_sheet.requested_for.first_name;
                        var lastname = gr_sheet.requested_for.last_name;
                        var contract = gr_sheet.contract.u_contrat_number;
                        /**********************************************************************************************/
                        /* PSO 03.07.20 - récupérer le code comptable au lieu du code loga D01 pour les frais divers
                         * avant modif :
                         * var rubric = gr_line.rubric.code;
                         */
                        var rubric = gr_line.rubric.code;
                        if (rubric == 'D01') {
                            rubric = '' + gr_line.miscellaneous_account_code;
                            rubric = rubric.slice(-3);
                        }
                        /**********************************************************************************************/
                        /* 04.05.2020 Update facteur by Piece that will contain la valeur de KM 
                         * avant :
                         * var facteur = ((gr_line.refunded_value > 0) ? (""+gr_line.refunded_value) : "");
                         * var amount = ((facteur == "") ? ("" + gr_line.refunded_amount) : "");
                         */
                        var piece = ((gr_line.refunded_value > 0) ? ("" + gr_line.refunded_value) : "");
                        var amount = ((piece == "") ? ("" + gr_line.refunded_amount) : "");
                        /**********************************************************************************************/
                        /* PSO 08.04.20 - comment below line to add new one for getting date format as AAAA-MM-dd
                         * var date = new GlideDate().getDisplayValue();
                         */
                        var date = new GlideDate();
                        date.getByFormat('YYYY-MM-dd');
                        /**********************************************************************************************/

                        var date_attribution = "";
                        var tmpDate = "" + gr_extract.getDisplayValue("attribution_date");
                        date_attribution += gr_extract.getDisplayValue("attribution_date");
                        date_attribution = tmpDate.substr(6, 4) + "-" + tmpDate.substr(3, 2) + "-01";

                        //PSO 07.01.2021
                        // Get company code
                        var sCompanyCode = gr_sheet.contract.u_company_code;

                        // Get UniteCharge
                        var sUniteCharge = "";
                        if (rubric == '809') {
                            if (sCompanyCode == '1090')
                                sUniteCharge = 'W1046';
                            else if (sCompanyCode == '2000')
                                sUniteCharge = 'D1046';
                            else if (sCompanyCode == '2011')
                                sUniteCharge = 'Z1046';
                            else if (sCompanyCode == '2022')
                                sUniteCharge = 'R1046';
                        }

                        var new_csv_line = '';
                        if (rubric == '809') {
                            new_csv_line = '"[VARTAB]","INSERT","HVS","INT","' + employee_number + '","' + lastname + '","' + firstname + '","' + contract + '","' + rubric + '","","","","' + amount + '","' + sUniteCharge + '",,"' + sCompanyCode + '","' + date + '","' + date_attribution + '",,,,,,"' + piece + '",,,,,,,,,,,,,,,,,,,,';
                        } else if (rubric == '79C') { // Contract number not included in file
                            new_csv_line = '"[VARTAB]","INSERT","HVS","INT","' + employee_number + '","' + lastname + '","' + firstname + '",,"' + rubric + '","","","","' + amount + '","' + sUniteCharge + '",,"' + sCompanyCode + '","' + date + '","' + date_attribution + '",,,,,,"' + piece + '",,,,,,,,,,,,,,,,,,,,';
                        } else {
                            new_csv_line = '"[VARTAB]","INSERT","HVS","INT","' + employee_number + '","' + lastname + '","' + firstname + '","' + contract + '","' + rubric + '","","","","' + amount + '",,,,"' + date + '","' + date_attribution + '",,,,,,"' + piece + '",,,,,,,,,,,,,,,,,,,,';
                        }
                        new_csv_line += "\r\n";
                        if (gr_line.rubric.type == "training") {
                            csvData_training += new_csv_line;
                        } else {
                            csvData_standard += new_csv_line;
                        }

                    }
                }
                //-------------------------------------

                //Update the expense sheet
                gr_sheet.active = false;
                gr_sheet.status = 4; //Sent for refound
                gr_sheet.extract_ref = extract_id;
                gr_sheet.update();
            }


            //Here we will create the CSV of the approved expenses and then update the extract record, attach the CSV to the extract record.

            if (number_of_expense_lines > 0) {
                var grAttachment1 = new GlideSysAttachment();
                grAttachment1.write(gr_extract, fileName_standard, 'text/csv', csvData_standard);
                var grAttachment2 = new GlideSysAttachment();
                grAttachment2.write(gr_extract, fileName_training, 'text/csv', csvData_training);
                gr_extract.comments = "CSV générés et attachés à cette extraction avec " + employees_refunded.length + " employés à rembourser.";
            }

            gr_extract.number_of_expenses = number_of_expense_sheets;
            gr_extract.number_of_expense_lines = number_of_expense_lines;
            gr_extract.generated_on = new GlideDateTime().getDisplayValue();
            gr_extract.number_of_employees = employees_refunded.length;
            gr_extract.total_amount = total_amount_extract;

            gr_extract.status = 2;
            gr_extract.update();
        }

		
		

    },

    generateCSV_AdvanceSalary: function(extract_id) {

        /**********************************************************************************************/
        /* PSO 30.10.2020 - generate extract for Salary Advance request
         */
        // uncomment this line for testing var queryAdvanceSalary = 'sys_id=d3b760f9db8e1050f5e2174b069619dd^assignment_group=c44ca858dbd1d010f5e2174b06961956^approval=approved^state=7^ORstate=8';
        // comment below line for testing
        var queryAdvanceSalary = 'assignment_group=c44ca858dbd1d010f5e2174b06961956^approval=approved^state=7^ORstate=8';

        var number_of_salary_advance = 0;
        var total_amount_salary_advance = parseFloat(0);
        var employees_refunded = [];


        var gr_extract = new GlideRecord("x_hdvi2_btask_salary_advance_extract");
        if (gr_extract.get(extract_id)) {

            //--------------------------------


            var Headers = ["Type,Fonction,Societe,Groupe Decompte,Matricule,Nom,Prenom,Contrat,Rubrique,Jours,Heures,Facteur,Montant,CC,Compte,UniteCharge,Date Jour,Attribution,Source,Date Source,Pourcentage,C/C,ID User,Pieces,Societe C/C,GrpDec C/C,Position,Texte,Employe des,Employe au,%-Impot,%-Impot,Numero Justificatif,Groupe Service,Rubrique 1,Rubrique 2,Rubrique 3,Numero,Etablissement,Jour precis,Numero Famille,Mois,Annee,ID unique,Date,fehlerhafte Datensatze vom Import"];
            var fileName_standard = 'extract_advance_salary.csv';

            var csvData = ''; //The variable csvData will contain a string which is used to build the CSV file contents
            for (var i = 0; i < Headers.length; i++) { //Build the Headers
                csvData += '"' + Headers[i] + '"' + ',';
            }
            csvData += "\r\n";
            var csvData_standard = csvData;


            var gr_AdvanceSalary = new GlideRecord("x_hdvi2_btask_salary_task");
            gr_AdvanceSalary.addEncodedQuery(queryAdvanceSalary);
            gr_AdvanceSalary.query();

            while (gr_AdvanceSalary.next()) {

                //Update stats variables
                number_of_salary_advance++;
                total_amount_salary_advance += parseFloat(gr_AdvanceSalary.amount);

                var new_employee = true;
                var employee_to_search = "" + gr_AdvanceSalary.requested_for.sys_id;
                for (var x = 0; x < employees_refunded.length; x++) {
                    if (employees_refunded[x] == employee_to_search) {
                        new_employee = false;
                        break;

                    }
                }

                if (new_employee == true) {
                    employees_refunded.push(employee_to_search);
                }

                //-------------------------------------

                //Add new line to the CSV file
                var employee_number = "";
                if (gr_AdvanceSalary.requested_for.employee_number) {
                    employee_number = "00000000" + gr_AdvanceSalary.requested_for.employee_number.replace(/[a-zA-Z_-]/g, "");
                    employee_number = employee_number.slice(-8);
                }
                var firstname = gr_AdvanceSalary.requested_for.first_name;
                var lastname = gr_AdvanceSalary.requested_for.last_name;

                // Get Contract Number
                var contract = "";
                var gr_user_contract = new GlideAggregate("u_hvs_user_contract");
                gr_user_contract.addAggregate('MAX', 'u_contrat_number');
                gr_user_contract.addEncodedQuery("u_active=true^u_user=" + gr_AdvanceSalary.requested_for);
                gr_user_contract.groupBy('u_user');
                gr_user_contract.setLimit(1);
                gr_user_contract.query();
                while (gr_user_contract.next()) {
                    contract = gr_user_contract.getAggregate('MAX', 'u_contrat_number');
                }

                // Get Company Code
                var code_societe = "";
                var gr_user_contract2 = new GlideRecord("u_hvs_user_contract");
                gr_user_contract2.addEncodedQuery("u_active=true^u_contrat_number=" + contract + "^u_user=" + gr_AdvanceSalary.requested_for);
                gr_user_contract2.setLimit(1);
                gr_user_contract2.query();
                while (gr_user_contract2.next()) {
                    code_societe = gr_user_contract2.getValue('u_company_code');
                }

                var rubric = '910';
                var piece = "";
                var amount = gr_AdvanceSalary.amount;

                var date = new GlideDate();
                date.getByFormat('YYYY-MM-dd');

                var date_attribution = "";
                var tmpDate = "" + gr_extract.getDisplayValue("attribution_date");
                date_attribution += gr_extract.getDisplayValue("attribution_date");
                date_attribution = tmpDate.substr(6, 4) + "-" + tmpDate.substr(3, 2) + "-01";

                var new_csv_line = '"[VARTAB]","INSERT","' + code_societe + '","INT","' + employee_number + '","' + lastname + '","' + firstname + '","' + contract + '","' + rubric + '","","","","' + amount + '",,,,"' + date + '","' + date_attribution + '",,,,,,,,,,"Demande Avance sur Salaire pour le mois de ' + gr_AdvanceSalary.getDisplayValue("month") + ' pour ' + gr_AdvanceSalary.requested_for.name + '",,,,,,,,,,,,,,,,';

                new_csv_line += "\r\n";
                csvData_standard += new_csv_line;

                //-------------------------------------

                //Update the Salary Task record
                gr_AdvanceSalary.active = false;
                gr_AdvanceSalary.state = 10; //Sent for payment
                gr_AdvanceSalary.extract_ref = extract_id;
                gr_AdvanceSalary.update();
            }


            //Here we will create the CSV of the approved expenses and then update the extract record, attach the CSV to the extract record.

            if (number_of_salary_advance > 0) {
                var grAttachment1 = new GlideSysAttachment();
                grAttachment1.write(gr_extract, fileName_standard, 'text/csv', csvData_standard);
                var grAttachment2 = new GlideSysAttachment();
            }

            gr_extract.number_of_salary_advance = number_of_salary_advance;
            gr_extract.generated_on = new GlideDateTime().getDisplayValue();
            gr_extract.number_of_employees = employees_refunded.length;
            gr_extract.total_amount = total_amount_salary_advance;

            gr_extract.status = 2;
            gr_extract.update();
        }
    },

    _generateReportForAccounting: function(extract_id) {

        //Generation of the report and send it to the accounting team
        var id_scheduled_report = gs.getProperty("x_hdvi2_expense.scheduled_report_to_accounting");
        var gr_job = new GlideRecord("sysauto_report");
        if (gr_job.get(id_scheduled_report)) {

            //Execution of the scheduled report
            gs.executeNow(gr_job);

            var gr_extract = new GlideRecord("x_hdvi2_expense_extract");
            if (gr_extract.get(extract_id)) {
                //3 minutes after will set the expenses as Sent for refund, it will let enough time for the report to run
				// 11.02.2011 - Benjamin Broch - The funds expense sheets are now in the normal extract too
              /*  var processTime = new GlideDateTime();
                processTime.addSeconds(180);
                gs.eventQueueScheduled("x_hdvi2_expense.hvs.setExpensesWithFunds", gr_extract, extract_id, "", processTime);*/


            }


        }
        //SncTriggerSynchronizer.executeNow(id_scheduled_report);




    },




    type: 'HVSExpenseExtractUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>benjamin.broch</sys_created_by>
        <sys_created_on>2020-02-07 13:38:12</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>18df70c6dbf28490011e177e169619ef</sys_id>
        <sys_mod_count>153</sys_mod_count>
        <sys_name>HVSExpenseExtractUtils</sys_name>
        <sys_package display_value="Expense Management" source="x_hdvi2_expense">50e8c3d7dbea0090f5e2174b06961954</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Expense Management">50e8c3d7dbea0090f5e2174b06961954</sys_scope>
        <sys_update_name>sys_script_include_18df70c6dbf28490011e177e169619ef</sys_update_name>
        <sys_updated_by>h40009222</sys_updated_by>
        <sys_updated_on>2021-07-02 12:55:02</sys_updated_on>
    </sys_script_include>
</record_update>
