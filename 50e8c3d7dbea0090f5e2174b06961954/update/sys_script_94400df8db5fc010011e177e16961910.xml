<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_hdvi2_expense_line</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_hdvi2_expense_line">statusCHANGESTO3^active=true^refunded_value&gt;0^EQ<item display_value="Approved" endquery="false" field="status" goto="false" newquery="false" operator="CHANGESTO" or="false" value="3"/>
            <item endquery="false" field="active" goto="false" newquery="false" operator="=" or="false" value="true"/>
            <item endquery="false" field="refunded_value" goto="false" newquery="false" operator="&gt;" or="false" value="0"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>HVS - When approved update requestor</name>
        <onclick/>
        <order>10</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var amount = new x_hdvi2_expense.HVSExpenseUserUtils().calcAmountBasedOnKM(current.expense.requested_for, current.refunded_value);
	current.refunded_amount = amount;
	
	
	var gr_user = new GlideRecord("sys_user");
	if(gr_user.get(current.expense.requested_for)){
		gr_user.u_km_number += current.refunded_value;
		gr_user.update();
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>benjamin.broch</sys_created_by>
        <sys_created_on>2020-02-28 13:01:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>94400df8db5fc010011e177e16961910</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>HVS - When approved update requestor</sys_name>
        <sys_overrides/>
        <sys_package display_value="HVS Expense Management" source="x_hdvi2_expense">50e8c3d7dbea0090f5e2174b06961954</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="HVS Expense Management">50e8c3d7dbea0090f5e2174b06961954</sys_scope>
        <sys_update_name>sys_script_94400df8db5fc010011e177e16961910</sys_update_name>
        <sys_updated_by>benjamin.broch</sys_updated_by>
        <sys_updated_on>2020-02-28 14:33:06</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
