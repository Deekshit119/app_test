<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function(spModal, $scope, $location, spAriaFocusManager) {
	var c = this;
	if(!c.activeTab){
		c.activeTab = 'tab0'
		c.data.current_filter = "true";
	}
	$scope.$on('data_table.click', function(e, parms){
		target = e.target;
		console.log($(target));
		var activeIndex = c.activeTab.substring(3);
		var view = $scope.data.tabs[activeIndex].view;
		var p = $scope.data.tabs[activeIndex].page_id;
		if(parms.table == "sc_request"){p="order_status";}
		if(parms.table=='x_hdvi2_expense_view') {
			c.server.get({
				getExpenseData: parms.table,
				setExpenseId: parms.sys_id
			}).then(function(resp){
				var explineid = resp.data.expline_id;
				var expcategory = resp.data.expsheet_category;

				var widgetExpenseOptionsOnly = {};
				widgetExpenseOptionsOnly.sys_id = explineid;
				widgetExpenseOptionsOnly.read_only = 'true';
				widgetExpenseOptionsOnly.refund_category = expcategory;

				var sSize='';
				if(expcategory.toLowerCase()=='training'){
					sSize = 'lg';
				}
				else {
					sSize = '';
				}

				spModal.open({
					title: '${expense.edit.title_box}',
					widget: '9fb6b106db5f8850f5e2174b069619ae',
					buttons: [],
					backdrop: 'static',
					widgetInput: widgetExpenseOptionsOnly,
					size: sSize
				}).then(function () {
						c.data.keywordsType='';
				});
				
			})
		}
		else {
			if(p !="#"){
				var s = {id: p, table: parms.table, sys_id: parms.sys_id, view: view};
				var newURL = $location.search(s);
				spAriaFocusManager.navigateToLink(newURL.url());
			}
		}

		});
		
		c.showTab = function(tab, e){
			c.activeTab = tab;
			target = e.target ;
			$(target).parents('.nav-tabs').find('li').removeClass('active');
			$(target).parents('li').addClass('active');
		};

 c.uiAction = function(action, tab, e) {
	 c.activeTab = tab;
 c.data.action = action;
	 c.data.tabtofilter = tab;
 c.server.update().then(function() {
c.data.current_filter = action;
												
})
 
 }
}
]]></client_script>
        <controller_as>c</controller_as>
        <css>td.selected  {
	background-color: $brand-primary;
	border-color: 1px solid #fff;
}

td.selected a {
		color: inherit;
  	text-decoration: none!important;
} 

td[data-field="expsheet_number"] a {
		color: inherit;
  	text-decoration: none!important;
} 

.widget-data-table .clearfix{
	display: none;
} 

  .cm-right-pane {
    .cm-widget-tabs {
      
      padding: 15px 0px 0px;
      .nav-tabs {
        border-bottom: 1px solid #ddd;
        margin-bottom: -1px;
      }     
      .nav-tabs &gt; li {
        padding: 0px 30px;
        font-size : 16px;
        font-weight: 400;
        line-height: 29px;
      }
      .nav-tabs &gt; li.widget-collapse {
        padding-right: 0px;
      }
      .nav-tabs  &gt; li:not(:last-of-type){
         //margin-right: 20px;
      }
      .nav-tabs  &gt; li  &gt; a {
        border: none;
        padding: 10px 20px 10px 20px;
      }
      .nav-tabs  &gt; li.active {
        border-bottom: 2px solid $link-color;
        
        a {
          color:initial!important; //$brand-primary;
        }
      }
      .nav-tabs  &gt; li.active &gt; a {
        background-color: inherit;
      }

      .hover-effect:hover {
        background-color: initial;
        border-bottom: 2px solid $link-color;
        cursor: pointer;
      }
    }
  }
    .cm-widget-body {
      padding-top: 20px;
      padding-left: 0px;
      padding-right: 0px;
      padding-bottom: 0px;      
    }

.btncustom{
  padding: 10px 20px 10px 20px;
  width: 50 px;
}


.test{
  min-height:30px;
  padding-right: 20 px;
   min-width:80px;
}
      </css>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>sp_page</field_list>
        <has_preview>true</has_preview>
        <id>hvs_expense_list_tabbed</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>HVS Expense List Tabbed</name>
        <option_schema>[{"hint":"?table=incident&amp;filter=caller_id=javascript:gs.getUserID()^active=true&amp;title=Incidents&amp;view=sp","name":"link1","section":"Behavior","default_value":"?table=incident&amp;title=Incidents&amp;page=ticket&amp;view=sp&amp;filter=caller_id=javascript:gs.getUserID()^active=true&amp;enable_filter=true&amp;show_new=true&amp;show_keywords=true&amp;show_breadcrumbs=true&amp;o=number&amp;d=desc&amp;p=1","label":"Tab 1 link","type":"string"},{"hint":"?table=sc_request&amp;title=Requests&amp;page=sc_request&amp;filter=requested_for=javascript:gs.getUserID()^active=true","name":"link2","section":"Behavior","default_value":"?table=sc_request&amp;title=Requests&amp;page=sc_request&amp;filter=requested_for=javascript:gs.getUserID()^active=true&amp;page=sc_request&amp;enable_filter=true","label":"Tab 2 link","type":"string"},{"hint":"?table=incident&amp;title=Incidents&amp;filter=caller_id=javascript:gs.getUserID()&amp;o=number&amp;d=desc","name":"link3","section":"Behavior","label":"Tab 3 link","type":"string"},{"hint":"?table=incident&amp;title=Incidents&amp;show_keywords=true&amp;enable_filter=true&amp;page=ticket","name":"link4","section":"Behavior","label":"Tab 4 link","type":"string"},{"hint":"?table=incident&amp;title=Incidents&amp;show_new=true&amp;show_breadcrumbs=true&amp;p=1","name":"link5","section":"Behavior","default_value":"","label":"Tab 5 link","type":"string"},{"hint":"?table=incident&amp;title=Incidents&amp;show_new=true&amp;show_breadcrumbs=true&amp;p=1","name":"link6","section":"Behavior","default_value":"","label":"Tab 6 link","type":"string"},{"hint":"?table=incident&amp;title=Incidents&amp;show_new=true&amp;show_breadcrumbs=true&amp;p=1","name":"link7","section":"Behavior","default_value":"","label":"Tab 7 link","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    // Hide training request for SZO users
    var currLink = '';
    var nbLink = 0;
    var arrLinks = ['link1', 'link2', 'link3', 'link4', 'link5', 'link6', 'link7'];
    for (var i = 0; i < arrLinks.length; i++) {
        currLink = options[arrLinks[i]];
        if (currLink) {
            nbLink++;
        }
    }

    // PSO 13.01.21 : Get expense data
		if(input && input.getExpenseData) {
			var geExpense = new GlideRecord(input.getExpenseData);
			if(geExpense.get(input.setExpenseId)) {
				data.expline_id = geExpense.getValue('expline_sys_id');
				data.expsheet_category = geExpense.getValue('expsheet_category');
			}
		}
			// 
		else {
			var page_id = ($sp.getParameter('id') || '');
			var sp_page = $sp.getValue('sp_page');
			if(sp_page) {
				var pageGR = new GlideRecord('sp_page');
				pageGR.get(sp_page);
				data.page_id = pageGR.id.getDisplayValue();
			}
			data.p = data.p || 1;
			data.page_index = (data.p - 1);
			data.window_size = $sp.getValue('maximum_entries') || 10;
			data.window_start = (data.page_index * data.window_size);
			data.window_end = (((data.page_index + 1) * data.window_size));

			var link = '';
			var widgetParams;
			var tabs = [];
			/*to add more tabs,
			1. Create new instance option(eg. link6)
			2. include option to below array
			var links = ['link1','link2','link3','link4','link5','link6'];
			*/
			//var links=['link1','link2','link3','link4','link5','link6','link7'];
			var links = [];
			links.push('link1');
			links.push('link2');
			links.push('link3');
			links.push('link4');
			links.push('link5');



			for (var i = 0; i < links.length; i++) {
					link = options[links[i]];
					if (link) {
							var tab = {};
							widgetParams = getTabData(link);
							if (widgetParams.table) {
									tab.tabTitle = widgetParams.title;
									tab.view = widgetParams.view;
									tab.tabName = 'tab' + i;

									if (input && !input.action && widgetParams.enable_button) {
											widgetParams.filter += "^active=true";
									} else if (input && input.action && input.action == "all" && widgetParams.enable_button) {
											data.current_filter = action;
											widgetParams.filter = widgetParams.filter;
									} else if (input && input.action && input.action != "all" && widgetParams.enable_button) {

											var action = input.action;
											widgetParams.filter += "^active=" + action;
											data.current_filter = action;

									}
									if (widgetParams.table == "sc_request") {
											tab.page_id = "order_status";
									} else {
											tab.page_id = widgetParams.page_id;
									}
									tab.displayButton = widgetParams.enable_button;
									tab.dataTableWidget = $sp.getWidget('widget-data-table', widgetParams);
									tabs.push(tab);
							}
					}
			}
			if (!input) {
					tabs[0].className = 'active';
			} else {
					var number = input.tabtofilter.substring(3);
					tabs[number].className = 'active';
			}

			data.tabs = tabs;
		}
    function getTabData(link) {
        var table = getParameterByName(link, 'table');
        var view = getParameterByName(link, 'view') || 'sp';
        if (!table) {
            return;
        }

        var widgetParams = {
            table: table,
            o: getParameterByName(link, 'o') || $sp.getValue('order_by'),
            d: getParameterByName(link, 'd') || $sp.getValue('order_direction'),
            p: getParameterByName(link, 'p') || 1,
            view: view,
            fields: $sp.getListColumns(table, view),
            page_id: getParameterByName(link, 'page') || data.page_id || '#',
            show_keywords: getParameterByName(link, 'show_keywords'),
            show_breadcrumbs: getParameterByName(link, 'show_breadcrumbs'),
            show_new: getParameterByName(link, 'show_new'),
            filter: getParameterByName(link, 'filter'),
            enable_filter: getParameterByName(link, 'enable_filter'),
            enable_button: getParameterByName(link, 'enable_button'),
            window_size: data.window_size,
            title: gs.getMessage(getParameterByName(link, 'title'))
        };
        return widgetParams;
    }

    function getParameterByName(url, name) {
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>h40009222</sys_created_by>
        <sys_created_on>2022-01-12 15:47:40</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>20664cc11b8505107f172f4aab4bcb21</sys_id>
        <sys_mod_count>136</sys_mod_count>
        <sys_name>HVS Expense List Tabbed</sys_name>
        <sys_package display_value="HVS Expense Management" source="x_hdvi2_expense">50e8c3d7dbea0090f5e2174b06961954</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="HVS Expense Management">50e8c3d7dbea0090f5e2174b06961954</sys_scope>
        <sys_update_name>sp_widget_20664cc11b8505107f172f4aab4bcb21</sys_update_name>
        <sys_updated_by>h40009222</sys_updated_by>
        <sys_updated_on>2022-01-13 17:53:58</sys_updated_on>
        <template><![CDATA[<div>
 <div class="panel panel-{{::options.panel_type}} widget-toggle csm-widget cm-right-pane">
        <div class="panel-heading cm-widget-tabs" role="tabpanel">
          <ul class="nav nav-tabs">
                 <li role="tab" ng-repeat="tab in data.tabs" class="hover-effect cm-subs-tab {{tab.className}}" ng-if="tab.dataTableWidget" ng-click="c.showTab(tab.tabName, $event)">
              <a class="csm-link-disabled" tabindex="0">{{::tab.tabTitle}}</a>
            </li>                
          </ul>
        </div>

  <div class="panel-body cm-widget-body">
          <div class="cm-tab-content" ng-repeat="tab in data.tabs" ng-hide="c.activeTab!= tab.tabName">            
          <div class= "btncustom" ng-if="tab.displayButton">
            
  <button ng-if="data.current_filter =='all'" type="button" class="btn btn-primary test"  ng-click="c.uiAction('all',tab.tabName, $event)">${All}</button>
     <button ng-if="data.current_filter !='all'" type="button" class="btn btn-default test"  ng-click="c.uiAction('all',tab.tabName, $event)">${All}</button>       
    
  <button ng-if="data.current_filter =='true'" type="button" class="btn btn-primary test"  ng-click="c.uiAction('true',tab.tabName, $event)">${Active}</button>
   <button ng-if="data.current_filter !='true'" type="button" class="btn btn-default test"  ng-click="c.uiAction('true',tab.tabName, $event)">${Active}</button>         
            
 <button ng-if="data.current_filter =='false'" type="button" class="btn btn-primary test" ng-click="c.uiAction('false',tab.tabName, $event)">${Closed}</button>
   <button ng-if="data.current_filter !='false'" type="button" class="btn btn-default test"  ng-click="c.uiAction('false',tab.tabName, $event)">${Closed}</button>         
            
   </div>   
            <div ng-if="tab.dataTableWidget">
  	<sp-widget widget="tab.dataTableWidget"></sp-widget>
            </div>
          </div>
  </div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
